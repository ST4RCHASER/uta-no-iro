import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { z } from "zod"
import { useEffect } from "react"

import { Button } from "@uta/shadcn/components/ui/button"
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@uta/shadcn/components/ui/form"
import {
  InputOTP,
  InputOTPGroup,
  InputOTPSlot,
} from "@uta/shadcn/components/ui/input-otp"
import Head from "next/head"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@uta/shadcn/components/ui/card"
import { api } from "@uta/utils/api"
import { RxReload } from "react-icons/rx"
import { useRouter } from "next/router"

const FormSchema = z.object({
  pin: z.string().min(4, {
    message: "Room code must be 4 digits",
  }),
})

export function InputForm() {
  const router = useRouter()
  const form = useForm<z.infer<typeof FormSchema>>({
    resolver: zodResolver(FormSchema),
    defaultValues: {
      pin: "",
    },
  })

  const createRoom = api.rooms.createNewRoom.useMutation({
    onSuccess: (data) => {
      localStorage.setItem("room", data.code)
      void router.push("/remote")
    },
    onError: (error) => {
      form.reset()
      form.setError("pin", {
        message: error.message,
      })
    }
  })
  const isRoomExist = api.rooms.isRoomExist.useMutation({
    onSuccess: (data) => {
      if (data) {
        localStorage.setItem("room", data.code)
        void router.push("/remote")
      } else {
        form.reset()
        form.setError("pin", {
          message: "Room code not found",
        })
      }
    },
    onError: (error) => {
      form.reset()
      form.setError("pin", {
        message: error.message,
      })
    }
  })

  function onSubmit(data: z.infer<typeof FormSchema>) {
    isRoomExist.mutate(data.pin)

  }

  // Auto submit form
  useEffect(() => {
    if (form.getValues("pin").length === 4) {
      void form.handleSubmit(onSubmit)()
    }
  }, [form.getValues("pin")])
  

  return (
    <div>
      <Head>
        <title>Uta no iro - Join</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="flex justify-center items-center h-screen dark bg-[#09090B]">
          <Card>
            <CardHeader>
              <CardTitle>Join the room</CardTitle>
              <CardDescription>Enter the room code provided by the room owner <br />
                or create a new room by clicking the button below.</CardDescription>
            </CardHeader>
            <CardContent>
              <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                  <FormField
                    control={form.control}
                    name="pin"
                    render={({ field }) => (
                      <FormItem className="text-center">
                        <FormLabel>Room code</FormLabel>
                        <FormControl>
                          <InputOTP maxLength={4} {...field}>
                            <InputOTPGroup className="w-full justify-center">
                              <InputOTPSlot index={0} />
                              <InputOTPSlot index={1} />
                              <InputOTPSlot index={2} />
                              <InputOTPSlot index={3} />
                            </InputOTPGroup>
                          </InputOTP>
                        </FormControl>
                        <FormMessage />
                        <FormDescription>
                          Room code is a 4-digit code provided by the room owner.
                        </FormDescription>
                      </FormItem>
                    )}
                  />
                  <div className="space-y-2">
                    <Button type="submit" className="w-full" value="join" disabled={isRoomExist.isPending || createRoom.isPending}>
                      {isRoomExist.isPending || createRoom.isPending && <RxReload className="mr-2 h-4 w-4 animate-spin" />}
                      Join room</Button>
                    <Button type="submit" className="w-full" value="create" variant='outline' disabled={createRoom.isPending || isRoomExist.isPending} onClick={() => {
                      createRoom.mutate()
                    }
                    }>
                      {createRoom.isPending || isRoomExist.isPending && <RxReload className="mr-2 h-4 w-4 animate-spin" />}
                      Create new room</Button>
                  </div>
                </form>
              </Form>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  )
}

export default InputForm